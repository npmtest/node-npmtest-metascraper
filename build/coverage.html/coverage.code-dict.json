{"/home/travis/build/npmtest/node-npmtest-metascraper/test.js":"/* istanbul instrument in package npmtest_metascraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-metascraper/lib.npmtest_metascraper.js":"/* istanbul instrument in package npmtest_metascraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_metascraper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_metascraper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-metascraper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-metascraper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_metascraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_metascraper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_metascraper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_metascraper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_metascraper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_metascraper.__dirname + '/lib.npmtest_metascraper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/index.js":"'use strict';\n\nvar RULES = require('./rules');\nvar cheerio = require('cheerio');\nvar popsicle = require('popsicle');\n\n/**\n * Scrape metadata from `html`.\n *\n * @param {String} html\n * @param {Object} rules (optional)\n * @return {Promise} metadata\n */\n\nfunction scrapeHtml(html, rules) {\n  return scrapeMetadata(html, '', rules);\n}\n\n/**\n * Scrape metadata from `url`.\n *\n * @param {String} url\n * @param {Object} rules (optional)\n * @return {Promise} metadata\n */\n\nfunction scrapeUrl(url, rules) {\n  var request = popsicle.request({\n    url: url,\n    options: {\n      jar: process.browser ? null : popsicle.jar()\n    }\n  });\n\n  return request.then(function (res) {\n    return scrapeMetadata(res.body, url, rules);\n  });\n}\n\n/**\n * Scrape metadata from `window`.\n *\n * @param {Window} window\n * @param {Object} rules (optional)\n * @return {Promise} metadata\n */\n\nfunction scrapeWindow(window, rules) {\n  var html = window.document.documentElement.outerHTML;\n  var url = window.location.href;\n  return scrapeMetadata(html, url, rules);\n}\n\n/**\n * Scrape each entry in the metadata result dictionary in parallel.\n *\n * @param {String} html\n * @param {String} url\n * @param {Object} rules (optional)\n * @return {Promise} metadata\n */\n\nfunction scrapeMetadata(html, url, rules) {\n  rules = rules || RULES;\n  var keys = Object.keys(rules);\n  var $ = cheerio.load(html);\n  var promises = keys.map(function (key) {\n    return scrapeMetadatum($, url, rules[key]);\n  });\n\n  return Promise.all(promises).then(function (values) {\n    return keys.reduce(function (memo, key, i) {\n      memo[key] = values[i];\n      return memo;\n    }, {});\n  });\n}\n\n/**\n * Scrape the first non-null value returned by an array of `rules` functions for\n * a single property in the metadata result dictionary.\n *\n * @param {Cheerio} $\n * @param {String} url\n * @param {Array or Function} rules\n * @return {Promise} value\n */\n\nfunction scrapeMetadatum($, url, rules) {\n  if (!Array.isArray(rules)) rules = [rules];\n\n  return rules.reduce(function (promise, rule) {\n    return promise.then(function (value) {\n      if (value != null && value !== '') return value;\n      var next = rule($, url);\n      if (next != null && next !== '') return next;\n      return null;\n    });\n  }, Promise.resolve());\n}\n\n/**\n * Export.\n */\n\nmodule.exports = {\n  RULES: RULES,\n  scrapeHtml: scrapeHtml,\n  scrapeUrl: scrapeUrl,\n  scrapeWindow: scrapeWindow\n};","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/index.js":"'use strict';\n\nvar author = require('./author');\nvar date = require('./date');\nvar description = require('./description');\nvar image = require('./image');\nvar publisher = require('./publisher');\nvar title = require('./title');\nvar url = require('./url');\n\n/**\n * Export.\n */\n\nmodule.exports = {\n  author: author,\n  date: date,\n  description: description,\n  image: image,\n  publisher: publisher,\n  title: title,\n  url: url\n};","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/author.js":"'use strict';\n\nvar isUrl = require('is-url');\nvar toTitle = require('to-title-case');\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (typeof value != 'string') return;\n    if (isUrl(value)) return;\n    if (value.indexOf('www.') === 0) return;\n    if (value.includes('|')) return;\n\n    // trim extra whitespace\n    value = value.replace(/\\s+/g, ' ');\n    value = value.trim();\n\n    // remove any extra \"by\" in the start of the string\n    value = value.replace(/^[\\s\\n]*by[\\s\\n]*/im, '');\n\n    // make it title case, since some sites have it in weird casing\n    value = toTitle(value);\n\n    return value;\n  };\n}\n\n/**\n * Enforce stricter matching for a `rule`.\n *\n * @param {Function} rule\n * @return {Function} stricter\n */\n\nfunction strict(rule) {\n  return function ($) {\n    var value = rule($);\n    var regexp = /^\\S+\\s+\\S+/;\n    if (!regexp.test(value)) return;\n    return value;\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"article:author\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"author\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.author\"]').attr('content');\n}), wrap(function ($) {\n  return $('[rel=\"author\"]').first().text();\n}), wrap(function ($) {\n  return $('[itemprop*=\"author\"] [itemprop=\"name\"]').first().text();\n}), wrap(function ($) {\n  return $('[itemprop*=\"author\"]').first().text();\n}), wrap(function ($) {\n  return $('meta[property=\"book:author\"]').attr('content');\n}), strict(wrap(function ($) {\n  return $('a[class*=\"author\"]').first().text();\n})), strict(wrap(function ($) {\n  return $('[class*=\"author\"] a').first().text();\n})), strict(wrap(function ($) {\n  return $('[class*=\"author\"]').first().text();\n})), strict(wrap(function ($) {\n  return $('[class*=\"byline\"]').text();\n})), strict(wrap(function ($) {\n  return $('a[href*=\"/author/\"]').text();\n}))];","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/date.js":"'use strict';\n\nvar isIso = require('is-isodate');\nvar chrono = require('chrono-node');\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (!value) return;\n\n    // remove whitespace for easier parsing\n    value = value.trim();\n\n    // convert isodates to restringify, because sometimes they are truncated\n    if (isIso(value)) return new Date(value).toISOString();\n\n    // parse number strings as milliseconds\n    if (/^[0-9]+$/.test(value)) {\n      var int = parseInt(value, 10);\n      var date = new Date(int);\n      return date.toISOString();\n    }\n\n    // try to parse with the built-in date parser\n    var native = new Date(value);\n    if (!isNaN(native.getTime())) return native.toISOString();\n\n    // try to parse a complex date string\n    var parsed = chrono.parseDate(value);\n    if (parsed) return parsed.toISOString();\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"article:published_time\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"dc.date\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"DC.date\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"dc.date.issued\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"DC.date.issued\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"dc.date.created\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"DC.date.created\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"DC.Date\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"date\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"dcterms.date\"]').attr('content');\n}), wrap(function ($) {\n  return $('[itemprop=\"datePublished\"]').attr('content');\n}), wrap(function ($) {\n  return $('time[itemprop*=\"pubDate\"]').attr('datetime');\n}), wrap(function ($) {\n  return $('time[itemprop*=\"pubdate\"]').attr('datetime');\n}), wrap(function ($) {\n  return $('[property*=\"dc:date\"]').attr('content');\n}), wrap(function ($) {\n  return $('[property*=\"dc:created\"]').attr('content');\n}), wrap(function ($) {\n  return $('time[datetime][pubdate]').attr('datetime');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.date\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"book:release_date\"]').attr('content');\n}), wrap(function ($) {\n  return $('time[datetime]').attr('datetime');\n}), wrap(function ($) {\n  return $('[class*=\"byline\"]').text();\n}), wrap(function ($) {\n  return $('[class*=\"dateline\"]').text();\n}), wrap(function ($) {\n  return $('[class*=\"date\"]').text();\n}), wrap(function ($) {\n  return $('[id*=\"date\"]').text();\n}), wrap(function ($) {\n  return $('[class*=\"post-meta\"]').text();\n}), wrap(function ($, url) {\n  var regexp = /(\\d{4}[\\-\\/]\\d{2}[\\-\\/]\\d{2})/;\n  var match = regexp.exec(url);\n  if (!match) return;\n  var string = match[1];\n  var date = new Date(string);\n  return date.toISOString();\n}), wrap(function ($) {\n  var text = $('[class*=\"byline\"]').text();\n  if (!text) return;\n  var regexp = /(\\w+ \\d{2},? \\d{4})/;\n  var match = regexp.exec(text);\n  if (!match) return;\n  var string = match[1];\n  var date = new Date(string);\n  return date.toISOString();\n})];","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/description.js":"'use strict';\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (typeof value != 'string') return;\n\n    // remove extra whitespace\n    value = value.trim();\n\n    // if it starts with a location, like articles sometimes do in the opening\n    // paragraph, try to remove it\n    value = value.replace(/^[A-Z\\s]+\\s+[-—–]\\s+/, '');\n\n    return value;\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"og:description\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:description\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"description\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.description\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[itemprop=\"description\"]').attr('content');\n}), wrap(function ($) {\n  return $('.post-content p').first().text();\n}), wrap(function ($) {\n  return $('.entry-content p').first().text();\n}), wrap(function ($) {\n  return $('article p').first().text();\n})];","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/image.js":"'use strict';\n\nvar isUrl = require('is-url');\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (!isUrl(value)) return;\n    return value;\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"og:image:secure_url\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"og:image:url\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"og:image\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:image\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"twitter:image\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:image:src\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"twitter:image:src\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.image\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.image.full\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.image.thumb\"]').attr('content');\n}), wrap(function ($) {\n  return $('article img[src]').first().attr('src');\n}), wrap(function ($) {\n  return $('#content img[src]').first().attr('src');\n}), wrap(function ($) {\n  return $('[class*=\"article\"] img[src]').first().attr('src');\n}), wrap(function ($) {\n  return $('img[src]').first().attr('src');\n})];","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/publisher.js":"'use strict';\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (typeof value != 'string') return;\n\n    // remove whitespace and new lines\n    value = value.trim();\n    value = value.replace(/\\n/mg, '');\n\n    return value;\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"og:site_name\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"application-name\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"al:android:app_name\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"al:iphone:app_name\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[property=\"al:ipad:app_name\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"publisher\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"Publisher\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:app:name:iphone\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:app:name:ipad\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:app:name:googleplay\"]').attr('content');\n}), wrap(function ($) {\n  return $('#logo').text();\n}), wrap(function ($) {\n  return $('.logo').text();\n}), wrap(function ($) {\n  return $('a[class*=\"brand\"]').text();\n}), wrap(function ($) {\n  return $('[class*=\"brand\"]').text();\n}), wrap(function ($) {\n  return $('[class*=\"logo\"] a img[alt]').attr('alt');\n}), wrap(function ($) {\n  return $('[class*=\"logo\"] img[alt]').attr('alt');\n}), wrap(function ($) {\n  var title = $('title').text().trim();\n  var regexp = /^.*?\\|\\s+(.*)$/;\n  var matches = regexp.exec(title);\n  if (!matches) return;\n  return matches[1];\n}), wrap(function ($) {\n  return $('[itemtype=\"http://schema.org/Blog\"] [itemprop=\"name\"]').attr('content');\n}), wrap(function ($) {\n  var desc = $('link[rel=\"alternate\"][type=\"application/atom+xml\"]').attr('title');\n  var regexp = /^(.*?)\\s[-|]\\satom$/i;\n  var matches = regexp.exec(desc);\n  if (!matches) return;\n  return matches[1];\n})];","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/title.js":"'use strict';\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (typeof value != 'string') return;\n\n    // remove extra whitespace\n    value = value.replace(/\\s+/g, ' ');\n    value = value.trim();\n\n    return value;\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"og:title\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:title\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"sailthru.title\"]').attr('content');\n}), wrap(function ($) {\n  return $('.post-title').text();\n}), wrap(function ($) {\n  return $('.entry-title').text();\n}), wrap(function ($) {\n  return $('[itemtype=\"http://schema.org/BlogPosting\"] [itemprop=\"name\"]').text();\n}), wrap(function ($) {\n  return $('h1[class*=\"title\"] a').text();\n}), wrap(function ($) {\n  return $('h1[class*=\"title\"]').text();\n}), wrap(function ($) {\n  return $('title').text();\n})];","/home/travis/build/npmtest/node-npmtest-metascraper/node_modules/metascraper/dist/rules/url.js":"'use strict';\n\nvar isUrl = require('is-url');\n\n/**\n * Wrap a rule with validation and formatting logic.\n *\n * @param {Function} rule\n * @return {Function} wrapped\n */\n\nfunction wrap(rule) {\n  return function ($) {\n    var value = rule($);\n    if (typeof value != 'string') return;\n\n    // make sure it's a url\n    value = value.trim();\n    if (!isUrl(value)) return;\n\n    return value;\n  };\n}\n\n/**\n * Rules.\n */\n\nmodule.exports = [wrap(function ($) {\n  return $('meta[property=\"og:url\"]').attr('content');\n}), wrap(function ($) {\n  return $('meta[name=\"twitter:url\"]').attr('content');\n}), wrap(function ($) {\n  return $('link[rel=\"canonical\"]').attr('href');\n}), wrap(function ($, url) {\n  return url;\n})];"}